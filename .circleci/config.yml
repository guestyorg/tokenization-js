version: 2.1
orbs:
  slack: circleci/slack@2.5.1
  jq: circleci/jq@1.9.0
defaults:
  working_directory: ~/package
  docker: &ref_0
    - image: circleci/node:16.12.0
version_filter:
  tags: &ref_1
    only: /^v.*/
branches_ignore:
  branches: &ref_2
    ignore: /.*/
sb_branch_filter:
  branches: &ref_3
    only: /^sb.*/
commands:
  authenticate_npm:
    description: Authenticate with Registry
    steps:
      - run:
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
  install_deps:
    description: Install all dependencies and use cache
    steps:
      - authenticate_npm
      - restore_cache:
          name: Restore Yarn package cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Installing Yarn Pacakges
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn package cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ~/.cache/yarn
      - persist_to_workspace:
          root: .
          paths: .
jobs:
  build:
    working_directory: ~/package
    docker: *ref_0
    steps:
      - attach_workspace:
          at: ~/package
      - run:
          name: Building bundle
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build
  publish:
    working_directory: ~/package
    docker: *ref_0
    steps:
      - attach_workspace:
          at: ~/package
      - run: ls -la
      - jq/install
      - authenticate_npm
      - run: |
          regex=".*-alpha\.[0-9]"

          if [[ ${CIRCLE_TAG} =~ $regex ]]
          then
            cd build && npm publish --tag alpha
            echo "export TAG="alpha"" >> $BASH_ENV
          else
            cd build && npm publish
            echo "export TAG="latest"" >> $BASH_ENV
          fi
      - run: echo "export PACKAGE="$(cat package.json | jq '.name')"" >> $BASH_ENV
      - slack/notify:
          message: '*${PACKAGE}* ${CIRCLE_TAG} is out with tag *${TAG}*.'
          color: '#7474EF'
          webhook: ${SLACK_INFRA_WEBHOOK}
          include_job_number_field: false
          include_project_field: false
          include_visit_job_action: false
      - slack/status:
          mentions: here
          success_message: '*${PACKAGE}* ${CIRCLE_TAG} is out.'
  test:
    working_directory: ~/package
    docker: *ref_0
    steps:
      - checkout
      - install_deps
      - run:
          name: Run Tests
          command: yarn test
  send_approval_notification:
    working_directory: ~/package
    docker: *ref_0
    steps:
      - slack/approval:
          message: Pending approval for release
  deploy_storybook:
    working_directory: ~/package
    docker: *ref_0
    steps:
      - attach_workspace:
          at: ~/package
      - run:
          name: Deploy storybook
          command: >-
            BRANCH=$CIRCLE_BRANCH TAG=$CIRCLE_TAG
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY yarn ebisu deploy-storybook
workflows:
  build-test-and-publish:
    jobs:
      - test:
          context: org-global-libs
          filters:
            tags: *ref_1
            branches:
              only:
                - master
      - build:
          context: org-global-libs
          requires:
            - test
          filters:
            tags: *ref_1
            branches: *ref_2
      - hold:
          type: approval
          requires:
            - build
          filters:
            tags: *ref_1
            branches: *ref_2
      - send_approval_notification:
          context: org-global-libs
          requires:
            - build
          filters:
            tags: *ref_1
            branches: *ref_2
      - publish:
          context: org-global-libs
          requires:
            - hold
          filters:
            tags: *ref_1
            branches: *ref_2
      - deploy_storybook:
          context: org-global-libs
          requires:
            - publish
          filters:
            tags: *ref_1
            branches: *ref_2
  deploy_to_storybook:
    jobs:
      - deploy_storybook:
          pre-steps:
            - checkout
            - install_deps
          context: org-global-libs
          filters:
            branches: *ref_3
